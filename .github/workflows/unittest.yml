name: Build

on:
  push:
    branches:
      - main
      - release-*
    tags:
      - "v*"
  pull_request:

env:
  GO_CACHE_BUSTER: 2
  ITEST_IMAGE_TAG: rc-${{ github.event.number }}
  COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
  RUN_ID: ${{ github.run_id }}
  PULL_NUMBER: ${{ github.event.pull_request.number }}
  MIN_TESTCOV: 80

jobs:
  detect-noop:
    runs-on: ubuntu-latest
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Detect No-op Changes
        # https://github.com/fkirc/skip-duplicate-actions
        id: noop
        uses: fkirc/skip-duplicate-actions@v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg", "**/Documentation/**"]'
          do_not_skip: '["push","schedule","release"]'
          concurrent_skipping: false
          paths_filter: |
            go:
              paths:
                - '**/*.go'

  GoCache:
    runs-on: ubuntu-latest
    needs:
      - detect-noop
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        # with:
        #   fetch-depth: 0
        #   submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Golang with cache
        uses: ./.github/actions/go-cache
        with:
          go-version-file: go.mod

  Build:
    runs-on: ubuntu-latest
    needs:
      - detect-noop
      - GoCache
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        # with:
        #   fetch-depth: 0
        #   submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Golang with cache
        uses: ./.github/actions/go-cache
        with:
          go-version-file: go.mod

      - name: Prepage
        run: make vars generate change_log version

      - name: version
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: make version

      - name: build
        run: |
          make build
          # mark the cache changed
          cp ./build_log.txt `go env GOCACHE`

  UnitTest:
    needs:
    - detect-noop
    - GoCache
    runs-on: ubuntu-latest

    steps:
      - name: Create code coverage status for the current commit
        if: github.event_name == 'pull_request'
        run: |
          curl "https://${GIT_USER}:${GIT_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" -d "{\"state\": \"pending\",\"target_url\": \"https://github.com/${GITHUB_REPOSITORY}/pull/${PULL_NUMBER}/checks?check_run_id=${RUN_ID}\",\"description\": \"in progress â€” This check has started... \",\"context\": \"code cov\"}"
        env:
          GIT_TOKEN: ${{ secrets.BUILDER_PAT }}
          GIT_USER: ${{ secrets.GIT_USER }}

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout
        uses: actions/checkout@v3
        # with:
        #   fetch-depth: 0
        #   submodules: true

      - name: Fetch History
        run: git fetch --prune --unshallow

      - name: Setup Golang with cache
        uses: ./.github/actions/go-cache
        with:
          go-version-file: go.mod

      - name: Install softhsm2
        run: sudo apt-get install softhsm2 opensc

      - name: Prepare
        run: make vars tools generate hsmconfig start-local-kms

      - name: UnitTest
        env:
          AWS_ACCESS_KEY_ID: notusedbyemulator
          AWS_SECRET_ACCESS_KEY: notusedbyemulator
          AWS_DEFAULT_REGION: us-west-2
        run: |
          make covtest
          # mark the cache changed
          cp ./coverage.out `go env GOCACHE`


      - name: Generate covarege Status
        if: github.event_name == 'pull_request'
        run: |
          set -x
          PROJECT_NAME=${PROJECT_NAME}

          total=`go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
          echo "total cov: $total"
          (( $(echo "$total > ${MIN_TESTCOV}" | bc -l) )) && STATE=success || STATE=failure
          curl "https://${GIT_USER}:${GIT_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" -d "{\"state\": \"${STATE}\",\"target_url\": \"https://github.com/${GITHUB_REPOSITORY}/pull/${PULL_NUMBER}/checks?check_run_id=${RUN_ID}\",\"description\": \"${total}%\",\"context\": \"code cov\"}"
        env:
          GIT_TOKEN: ${{ secrets.BUILDER_PAT }}
          GIT_USER: ${{ secrets.GIT_USER }}

      - name: coveralls
        if: github.event_name == 'pull_request'
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: make coveralls-github
